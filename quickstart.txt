Quickstart:

Step 0 - Make sure you have Docker correctly installed and configured. A CUDA device accessible to Docker containers is also highly recommended, but not strictly required. 

Step 1 - Check you local IP address and write it down, it will be required to run some commands down the line.

Step 2 - Build and run node-red-services:
Open a new terminal and run:
  cd node-red-services
  docker build -t node-red-services .
  docker run --name node-red-services --rm -p {YOUR_IP}:1880:1880 -v {ABSOLUTE_PATH_TO_CLONED_REP}/node-red-services/data:/data -it node-red-services
On a web browser:
  Access {YOUR_IP}/1880
  Once Node-RED UI loads, go to Menu > Import > Select a file to import, and import node-red-services/flows-aldo.json.
  Click Deploy and check if there where no issues caused by missing API keys.

Setp 3 - Build and run python-backend:
Open a new terminal and run:
  cd python-backend
  docker build -t python-backend .
  docker run --name python-backend --rm -p {YOUR_IP}:1881:1881 -e TRANSLATOR_SERVER={YOUR_IP}:1880 --gpus all -v {ABSOLUTE_PATH_TO_CLONED_REP}/python-backend/volume:/images python-backend

Setp 4 - Build and run keyframe-extractor:
Open a new terminal and run:
  cd keyframe-extractor
  docker build -t keyframe-extractor .
  docker run --name keyframe-extractor --rm -p {YOUR_IP}:1882:1882 -e CAPTIONING_SERVER={YOUR_IP}:1881 -v {ABSOLUTE_PATH_TO_CLONED_REP}/keyframe-extractor/volume:/videos keyframe-extractor


All services should now be up and running!


Test 1: Captioning a single image.
Open a new terminal and run:
  curl -X POST -F "data=@{PATH_TO_IMAGE}" http://{YOUR_IP}:1881/python-backend
Image must be jpg. Other file formats haven't been tested and may cause the application to fail.
Wait for caption string to be returned by the server. If not using a CUDA device, this might take several minutes.
If you have node-red-services UI open on the browser, you may hear the text-to-speech narration of the generated caption.
Image captions are not permanent, and will be lost if you close the terminal without saving them.

Test 2: Captioning a video.
Open a new terminal and run:
  curl -X POST -F "data=@{PATH_TO_VIDEO}" http://{YOUR_IP}:1882/keyframe-extractor
Video must be avi. Other video formats WILL cause the application to fail.
Wait for captions to be generated by the server (they won't appear in the terminal). If not using a CUDA device, this might take several hours.
If you have node-red-services UI open on the browser, the text-to-speech narration of all the generated captions will be played at once and will be unintelligible.
Video captions are permanent and will be saved to a text file alongside extracted keyframes in /keyframe-extractor/volume/{SOME_UUID}/..., where SOME_UUID is an unique identifier assigned by the keyframe-extractor service.
